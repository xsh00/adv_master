# 全局配置
worker_processes auto; # 自动选择工作进程数量，通常为 CPU 核心数
error_log /var/log/nginx/error.log warn; # 错误日志位置和级别
pid /var/run/nginx.pid; # 存储主进程 PID 的文件路径

events {
    worker_connections 1024; # 每个工作进程允许的最大连接数
}

http {
    include /etc/nginx/mime.types; # 加载 MIME 类型
    default_type application/octet-stream; # 默认 MIME 类型

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main; # 访问日志位置

    sendfile on; # 启用高效文件传输
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65; # 连接超时
    gzip on; # 启用 Gzip 压缩
    gzip_types text/css application/javascript application/json application/xml text/plain; # 需要压缩的文件类型

    # 反向代理缓存（可选，用于缓存静态资源或API请求）
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # 服务器配置
    server {
        listen 80; # 监听端口 80
        server_name example.com www.example.com; # 监听的域名

        root /var/www/example.com/html; # 网站根目录
        index index.html index.htm; # 默认首页

        # 静态文件处理
        location / {
            try_files $uri $uri/ =404; # 尝试访问文件，如果不存在则返回 404
        }

        # 反向代理配置，用于处理 /api 的后端请求
        location /api/ {
            proxy_pass http://backend:8000; # 代理到后端 Django 或其他服务
            proxy_set_header Host $host; # 保留原始的主机头
            proxy_set_header X-Real-IP $remote_addr; # 将客户端的真实 IP 转发给后端
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 可选：启用缓存
            proxy_cache my_cache;
            proxy_cache_bypass $http_cache_control;
        }

        # SSL 配置（如果使用 HTTPS）
        # server {
        #     listen 443 ssl;
        #     server_name example.com www.example.com;
        #     ssl_certificate /etc/ssl/certs/example.com.crt;
        #     ssl_certificate_key /etc/ssl/private/example.com.key;

        #     location / {
        #         try_files $uri $uri/ =404;
        #     }

        #     location /api/ {
        #         proxy_pass http://backend:8000;
        #     }
        # }

        # 错误页面
        error_page 404 /404.html;
        location = /404.html {
            root /var/www/example.com/html;
            internal; # 该页面只能由 nginx 内部调用
        }

        # 访问日志配置
        access_log /var/log/nginx/example.com.access.log;
        error_log /var/log/nginx/example.com.error.log;
    }
}
